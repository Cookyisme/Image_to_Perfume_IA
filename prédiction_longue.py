# -*- coding: utf-8 -*-
"""Prédiction_longue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JcWoy2mTcFH2rkFPk9ciArKLMPLeFggf
"""

!python -m spacy download en_core_web_md
from google.colab import files
from IPython.display import Image

# Récupération de l'image
uploaded = files.upload()
filename = list(uploaded.keys())[0]
Image(filename)
img_path = filename

# Charger le modèle pré-entraîné (sans la couche de classification)
import tensorflow as tf
import numpy as np
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image

model = ResNet50(weights='imagenet', include_top = True)

def extract_features(img_path):
    # Charger et prétraiter l'image
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)  # Normalisation pour ResNet50

    # Extraire les caractéristiques
    features = model.predict(img_array)
    return features

# Prédiction des éléments de l'image
def predict(img_path):
  features = extract_features(img_path)
  img = image.load_img(img_path, target_size=(224, 224))
  img_array = image.img_to_array(img)
  img_array = np.expand_dims(img_array, axis=0)
  img_array = preprocess_input(img_array)

  preds = model.predict(img_array)
  return preds

preds = predict(img_path)
keywords = [label for _, label, _ in decode_predictions(preds, top=1)[0]]


# Ecriture des prédictions
print("Caractéristiques de l'image:", decode_predictions(preds, top=3)[0])
print("Mots clés:", keywords)

import pandas as pd
import spacy

# Charger le modèle NLP spaCy
nlp = spacy.load("en_core_web_md")

def load_perfume_db(csv_file="perfume_table.csv"):
    """Charge la base de données des parfums et transforme les descriptions en vecteurs NLP."""
    try:
        df = pd.read_csv(csv_file, encoding='latin-1', on_bad_lines='warn')
    except ValueError:  # For older pandas versions that don't support 'warn'
        df = pd.read_csv(csv_file, encoding='latin-1', error_bad_lines=False)
    perfumes = []
    for _, row in df.iterrows():
        perfumes.append({
            "Name": row["title"],
            "notes": row["notes"],
            "embedding": nlp(row["notes"]).vector
        })
    return perfumes

# Charger la base de parfums
perfume_db = load_perfume_db()

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

def match_perfume(image_keywords, perfume_db):
    """Associe les objets détectés à un parfum en comparant les descriptions."""
    # Convertir les mots-clés en vecteur NLP
    keywords_text = " ".join(image_keywords)  # Ex: "dog forest grass"
    image_vector = nlp(keywords_text).vector.reshape(1, -1)

    # Comparer avec la base des parfums
    perfume_embeddings = np.array([p["embedding"] for p in perfume_db])
    similarities = cosine_similarity(image_vector, perfume_embeddings)
    best_match_idx = np.argmax(similarities)

    return perfume_db[best_match_idx]["Name"]

# Trouver le parfum correspondant
best_perfume = match_perfume(keywords, perfume_db)
print("Parfum recommandé :", best_perfume)